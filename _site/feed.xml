<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Luke Deniston</title>
<subtitle type="text">Blog of Luke Deniston</subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2014-09-04T22:12:35-07:00</updated>
<id>/</id>
<author>
  <name>Luke Deniston</name>
  <uri>/</uri>
  <email>luke@lukedeniston.com</email>
</author>


<entry>
  <title type="html"><![CDATA[A Debugging Story]]></title>
  <link rel="alternate" type="text/html" href="/debugging" />
  <id>/debugging</id>
  <published>2014-09-04T06:58:55-07:00</published>
  <updated>2014-09-04T06:58:55-07:00</updated>
  <author>
    <name>Luke Deniston</name>
    <uri></uri>
    <email>luke@lukedeniston.com</email>
  </author>
  <content type="html">&lt;p&gt;Here&amp;#8217;s a little story about a Swift/CoreData bug I cam across and how I got to the bottom of things.&lt;/p&gt;

&lt;h2 id=&#39;green_red_refactor&#39;&gt;Green, Red, Refactor?&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;ve been working on a small side project in Swift and I just got around to writing some unit tests. Up until this point it has mostly been proof-of-concept, so the code was prety rough and I was ready to start cleaning it up. One technique I used throughout my &lt;code&gt;NSManagedObject&lt;/code&gt; classes looked something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class func userWithUsername(username: String) -&amp;gt; User {
	var user : User?
	let request = NSFetchRequest()
	request.entity = NSEntityDescription.entityForName(&amp;quot;User&amp;quot;, inManagedObjectContext: CoreDataStack.sharedInstance.managedObjectContext)
	request.predicate = NSPredicate(format: &amp;quot;username = &amp;#39;\(username)&amp;#39;&amp;quot;)
	user = CoreDataStack.sharedInstance.managedObjectContext.executeFetchRequest(request, error: nil).last as? User

	if user == nil {
		user =  NSEntityDescription.insertNewObjectForEntityForName(&amp;quot;User&amp;quot;, inManagedObjectContext: CoreDataStack.sharedInstance.managedObjectContext) as? User
		user?.username = username
	}

	return user!;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function will give me the &lt;code&gt;User&lt;/code&gt; with the given &lt;code&gt;username&lt;/code&gt;, or if one doesn&amp;#8217;t exist it creates it. I know this code is working fine, but when I write a unit test it faults on the last line, reporting that &lt;code&gt;user&lt;/code&gt; was still &lt;code&gt;nil&lt;/code&gt;! But how could that be?&lt;/p&gt;

&lt;h2 id=&#39;isolate&#39;&gt;Isolate&lt;/h2&gt;

&lt;p&gt;The first step I usually take in debugging is &lt;em&gt;isolation&lt;/em&gt;: remove as many external pieces as I can so I&amp;#8217;m working with the minimum set of variables within the system.&lt;/p&gt;

&lt;p&gt;The function above is not particularly well written, as it depends on &lt;code&gt;CoreDataStack.sharedInstance&lt;/code&gt; to work properly. It would be far better to implement &lt;a href=&#39;http://en.wikipedia.org/wiki/Dependency_injection&#39;&gt;dependency injection&lt;/a&gt; so I could pass in an &lt;code&gt;NSManagedObjectContext&lt;/code&gt;. I&amp;#8217;d read a bit about race conditions causing problems with SQLite backed stores in unit tests, so I implemented a new &lt;code&gt;NSInMemoryStoreType&lt;/code&gt; persistent store for my tests and refactured the function under test a bit. My new function signature looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class func userWithUsername(username: String, context: NSManagedObjectContext = CoreDataStack.sharedInstance.managedObjectContext) -&amp;gt; User&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can now pass in an &lt;code&gt;NSManagedObjectContext&lt;/code&gt; if I want to, or I can rely on the default one provided by my &lt;code&gt;CoreDataStack.sharedInstance&lt;/code&gt;. I patted myself on the back and fired off my tests&amp;#8230; Only to have them fail in the exact same way.&lt;/p&gt;

&lt;h2 id=&#39;inspect&#39;&gt;Inspect&lt;/h2&gt;

&lt;p&gt;Another important part of debugging is &lt;em&gt;inspection&lt;/em&gt;: getting good information about what&amp;#8217;s going in your sysyem. (Hey, another &amp;#8220;I&amp;#8221; word! I sense a theme!)&lt;/p&gt;

&lt;p&gt;Fortunately CoreData gives us some great inspection tools by the way of &lt;a href=&#39;http://nshipster.com/launch-arguments-and-environment-variables/&#39;&gt;launch arguments&lt;/a&gt;. I set my launch arguments to &lt;code&gt;-com.apple.CoreData.SQLDebug 3&lt;/code&gt; and run the tests again. I watch the first few CoreData arguments scroll through the debugger as the app launches&amp;#8230;then nothing as my tests are fired off. Much headscratching later and I come to the conclusion that &lt;code&gt;NSInMemoryStoreType&lt;/code&gt; doesn&amp;#8217;t support the &lt;code&gt;com.apple.CoreData.SQLDebug&lt;/code&gt; argument (although I wasn&amp;#8217;t able to find any documentation about this). I ditch the memory store and create a new persistent store just for the tests. Now that I have an actual SQLite database to look at, I find out that my inserts are failing as well as my fetches.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&#39;/images/debugger.png&#39; /&gt;
	&lt;figcaption&gt;Relevant &lt;a href=&#39;http://xkcd.com/1163/&#39;&gt;XKCD&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#39;break_it_down&#39;&gt;Break It Down&lt;/h2&gt;

&lt;p&gt;The last technique I used was &lt;em&gt;breaking it down&lt;/em&gt;: assume nothing, confirm every step in the process. I&amp;#8217;m sorry that didn&amp;#8217;t start with &amp;#8220;I&amp;#8221;. I&amp;#8217;m not really big on themes.&lt;/p&gt;

&lt;p&gt;I make some headway when I split my insert statement into two:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let entity = NSEntityDescription.entityForName(&amp;quot;User&amp;quot;, inManagedObjectContext: context)
user =  User(entity: entity, insertIntoManagedObjectContext: context)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My inserts are working now, but my fetch requests are failing&amp;#8230; But &lt;em&gt;why&lt;/em&gt;? Why did that fix the insert statement? Why did I only have the problem with tests and not in production? And why isn&amp;#8217;t my fetch request working?&lt;/p&gt;

&lt;p&gt;I break down the fetch request into it&amp;#8217;s parts so I can inspect it properly (LLDB still isn&amp;#8217;t working right for me as of XCode 6 beta 6). I finally get to this point:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user = context.executeFetchRequest(request, error: error).last as? User&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Became:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let results = context.executeFetchRequest(request, error: error)
user = results.last as? User&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;#8217;m able to confirm that &lt;code&gt;results&lt;/code&gt; is getting data! I&amp;#8217;m pulling records in my fetch request! But &lt;code&gt;user&lt;/code&gt; still gets set to &lt;code&gt;nil&lt;/code&gt;!? -cue head pounding on desk-&lt;/p&gt;

&lt;p&gt;But then I see it&amp;#8230; On closer inspection the results of my fetch request are of type &lt;code&gt;AppNameTests.User&lt;/code&gt;. When I run the app the same fetch request returns objects of type &lt;code&gt;AppName.User&lt;/code&gt;. The &lt;code&gt;as? User&lt;/code&gt; was killing things, since it was not able to cast between &lt;code&gt;AppNameTests.User&lt;/code&gt; and &lt;code&gt;AppNameTests.User&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Now that I knew what to look for, I found &lt;a href=&#39;http://stackoverflow.com/questions/25242173/i-cant-use-my-core-data-model-in-two-targets-in-a-swift-project&#39;&gt;this handy Stack Overflow&lt;/a&gt; question about using core data models in multiple targets in Swift. I remove the app name namespace I added to the data models, and I add &lt;code&gt;@objc(User)&lt;/code&gt; to the top of the class and watch all the tests turn green.&lt;/p&gt;
  &lt;p&gt;&lt;a href=&quot;/debugging&quot;&gt;A Debugging Story&lt;/a&gt; was originally published by Luke Deniston at &lt;a href=&quot;&quot;&gt;Luke Deniston&lt;/a&gt; on September 04, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[A Goodbye Letter to Objective-C]]></title>
  <link rel="alternate" type="text/html" href="/goodbye-objective-c" />
  <id>/goodbye-objective-c</id>
  <published>2014-06-12T06:58:55-07:00</published>
  <updated>2014-06-12T06:58:55-07:00</updated>
  <author>
    <name>Luke Deniston</name>
    <uri></uri>
    <email>luke@lukedeniston.com</email>
  </author>
  <content type="html">&lt;p&gt;I had just been tasked to lead a mobile development team and I needed to pick up Objective-C (and iOS in general) very quickly. I wasn’t too worried since I had made similar transitions in the past without a problem. I assumed this would be even more painless since the more languages you know, the easier it is to learn a new one.&lt;/p&gt;

&lt;p&gt;I was wrong.&lt;/p&gt;

&lt;p&gt;Objective-C hurt my brain. My internal parser just couldn’t grasp the syntax. So I got mad. “What’s with the square brackets? Why are variables INSIDE the method name!? This is stupid. Why would anyone make a language like this?” But as with all my feelings I stuffed them into a bottle and never thought about them again, and over time something unexpected happened: &lt;em&gt;I fell in love&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I grew to love the obscenely long method names with the variables inside of the method (they read like sentences!). I even loved the square brackets (what a perfect visual metaphor for sending a message- they’re the envelope!). I learned the intricacies of the Objective-C runtime and the Foundation frameworks. I was swizzling and introspecting in ways I never thought possible.&lt;/p&gt;

&lt;p&gt;But by definition, Objective-C could never be free of C. String concatenation would always be the unsightly &lt;code&gt;[NSString stringWithFormat@“%@ %@, foo, bar]&lt;/code&gt;. All the good operators were already taken by C, so we were left with having to put an ampersand in front of everything. We would never be able to do a simple &lt;code&gt;==&lt;/code&gt; to compare. But who needs tuples, when you can pass in pointers, amiright?&lt;/p&gt;

&lt;p&gt;And occasionally I would bump my shins against the language. Lack of a generics equivalent meant that to be truly safe, every array loop should implement type checking. No namespaces meant that official guidelines dictated putting a three letter prefix before every class. Not to mention enums like &lt;code&gt;kCFStreamErrorHTTPSProxyFailureUnexpectedResponseToCONNECTMethod&lt;/code&gt; (yes, that’s &lt;a href=&#39;https://developer.apple.com/library/mac/documentation/Networking/Reference/CFNetworkErrors/Reference/reference.html#//apple_ref/doc/c_ref/kCFURLErrorNotConnectedToInternet&#39;&gt;real&lt;/a&gt;. Objective-C had a beauty to it, but it was marred in many places by things like its &lt;a href=&#39;http://goshdarnblocksyntax.com/&#39;&gt;gosh darn block syntax&lt;/a&gt; (which is the work safe version of that url. The real version doesn’t use “gosh darn” and starts with “f”).&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#39;Introducing Swift&#39; src=&#39;/images/Swift.jpg&#39; /&gt;&lt;/p&gt;

&lt;p&gt;When Swift was announced, I was shocked. So much progress had been made in Objective-C over the past year or two that there was no sign of Apple abandoning it. I even felt a little bit betrayed. Here I had become an expert in a language, just in time to see it die.&lt;/p&gt;

&lt;p&gt;But there is a season for everything, and Objective-C’s time has passed. My work responsibilities necessitated my brushing up on Ruby, and I remembered my love for its conciseness and intuitiveness. It still manages to read like english, despite being terse. Moving from the Ruby world to the Swift world seems fluid… there’s so much overlap that it seems like different accents of the same language. You say &lt;code&gt;def&lt;/code&gt; I say &lt;code&gt;func&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I think in time my love for Objective-C will fade. Dots and parenthesis will replace square brackets, and Objective-C will take its place in history as that oddball permutation of Smalltalk tacked on to C. Swift will take over, and any projects or libraries still in Objective-C will be left to the old guard.&lt;/p&gt;

&lt;p&gt;But for a while there, Objective-C and I really had something.&lt;/p&gt;
  &lt;p&gt;&lt;a href=&quot;/goodbye-objective-c&quot;&gt;A Goodbye Letter to Objective-C&lt;/a&gt; was originally published by Luke Deniston at &lt;a href=&quot;&quot;&gt;Luke Deniston&lt;/a&gt; on June 12, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Real World NSCoding]]></title>
  <link rel="alternate" type="text/html" href="/general/demo/sample/real_world_nscoding" />
  <id>/general/demo/sample/real_world_nscoding</id>
  <published>2013-11-14T00:00:00-08:00</published>
  <updated>2013-11-14T00:00:00-08:00</updated>
  <author>
    <name>Luke Deniston</name>
    <uri></uri>
    <email>luke@lukedeniston.com</email>
  </author>
  <content type="html">&lt;p&gt;In the hillarious and painfully accurate article &lt;a href=&#39;http://stilldrinking.org/programming-sucks&#39;&gt;Programming Sucks&lt;/a&gt;, Peter Welch said this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every programmer occasionally&amp;#8230;opens up a file on their computer&amp;#8230;This file is Good Code. It has sensible and consistent names for functions and variables. It&amp;#8217;s concise. It doesn&amp;#8217;t do anything obviously stupid. It has never had to live in the wild, or answer to a sales team&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Every programmer starts out writing some perfect little snowflake like this. Then they&amp;#8217;re told on Friday they need to have six hundred snowflakes written by Tuesday, so they cheat a bit here and there and maybe copy a few snowflakes and try to stick them together or they have to ask a coworker to work on one who melts it and then all the programmers&amp;#8217; snowflakes get dumped together in some inscrutable shape&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code in this article is not Good Code. In some places, it is in fact, Bad Code. There were opportunities to avoid this code, but sometimes sales teams and deadlines make Bad Code the Right Code for the problem. That&amp;#8217;s why this article is titled &amp;#8220;Real World NSCoding&amp;#8221;.&lt;/p&gt;

&lt;h2 id=&#39;the_problem&#39;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;I was recently brought in to help finish up a project that was essentially a large form. This wasn&amp;#8217;t a simple sign up form however, this was a form that rivaled a small business tax preparation (and with all the fun liability implications too!). One of the features that hadn&amp;#8217;t been implemented yet was the ability to save an incomplete form, and come back to it later by picking it from a list of forms.&lt;/p&gt;

&lt;p&gt;Had the form been backed by something like a CoreData object, this would have been easy, but instead it was a class with hundreds of properties, and many of those properties were classes with hundreds of properties.&lt;/p&gt;

&lt;h2 id=&#39;nscoding_to_the_rescue&#39;&gt;NSCoding To The Rescue&lt;/h2&gt;

&lt;p&gt;If you&amp;#8217;re looking for an introduction to the subject, &lt;a href=&#39;http://nshipster.com/nscoding/&#39;&gt;NSHipster&amp;#8217;s article on NSCoding&lt;/a&gt; is a great place to start. For the unfamiliar, &lt;a href=&#39;https://developer.apple.com/library/ios/documentation/cocoa/reference/foundation/Protocols/NSCoding_Protocol/Reference/Reference.html&#39;&gt;NSCoding&lt;/a&gt; is a protocol that defines only two methods: &lt;code&gt;encodeWithCoder:&lt;/code&gt; and &lt;code&gt;initWithCoder:&lt;/code&gt;. NSCoding by itself isn&amp;#8217;t that interesting, but paired with &lt;a href=&#39;https://developer.apple.com/library/ios/Documentation/Cocoa/Reference/Foundation/Classes/NSKeyedArchiver_Class/Reference/Reference.html&#39;&gt;NSKeyedArchiver&lt;/a&gt;/&lt;a href=&#39;https://developer.apple.com/library/ios/Documentation/Cocoa/Reference/Foundation/Classes/NSKeyedUnarchiver_Class/Reference/Reference.html#//apple_ref/occ/cl/NSKeyedUnarchiver&#39;&gt;NSKeyedUnarchiver&lt;/a&gt; you get a powerful and flexible way to persist arbitrary data objects to the file system.&lt;/p&gt;

&lt;p&gt;My problem was that it would be too time consuming at this point to go back and manually implement &lt;code&gt;encodeWithCoder:&lt;/code&gt; and &lt;code&gt;initWithCoder:&lt;/code&gt; on the dozens of classes used in the feature, and doing so would create a brittleness that would be hard to detect. I wanted to avoid situations where a developer added an NSString property to class, only to find out later that it needed to also be added to the NSCoding methods in order to be persisted.&lt;/p&gt;

&lt;p&gt;Fortunately, the dynamic nature of the Objective-C runtime gave me some introspection tools that I could leverage to make things relatively painless.&lt;/p&gt;

&lt;h2 id=&#39;the_solution&#39;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;ve had this method kicking around for a while (origins unknown). It&amp;#8217;s in a category for NSObject. Don&amp;#8217;t forget to &lt;code&gt;#import &amp;lt;objc/runtime.h&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objective-c&#39;&gt;&lt;span class=&#39;k&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;toDictionary&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;props&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;dictionary&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;unsigned&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;int&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;outCount&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;kt&#39;&gt;objc_property_t&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;properties&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;class_copyPropertyList&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;([&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;class&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;],&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;outCount&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;outCount&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;kt&#39;&gt;objc_property_t&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;property&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;properties&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;i&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;propertyName&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;property_getName&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;property&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)];&lt;/span&gt;
        &lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;propertyValue&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;valueForKey&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;propertyName&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;propertyValue&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;props&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;setObject&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;propertyValue&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;forKey&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;propertyName&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;props&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;setObject&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSNull&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;null&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;forKey&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;propertyName&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;free&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;properties&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;props&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This give us a nice NSDictionary representation of any NSObject. I made another category method that levies this dictionary to encode the object:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objective-c&#39;&gt;&lt;span class=&#39;k&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;LJD_encodeWithCoder:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;aCoder&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;selfDictionary&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;toDictionary&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;key&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;selfDictionary&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;([&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;selfDictionary&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;key&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;conformsToProtocol&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;err&#39;&gt;@&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;protocol&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoding&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)])&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aCoder&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;encodeObject&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;selfDictionary&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;key&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;forKey&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;key&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;c1&#39;&gt;// For debugging&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSLog&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;Non NSCoding: %@&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;key&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then for each class I need to persist, I simply declare that they conform to the &lt;code&gt;NSCoding&lt;/code&gt; protocol and add the following method:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objective-c&#39;&gt;&lt;span class=&#39;k&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;encodeWithCoder:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;aCoder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;LJD_encodeWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aCoder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While there are other more &amp;#8220;magical&amp;#8221; ways to accomplish this (overriding methods, swizzling, custom protocols), sometimes a &lt;em&gt;little bit&lt;/em&gt; of boilerplate makes it easer for developers down the line to follow what&amp;#8217;s happening.&lt;/p&gt;

&lt;h2 id=&#39;the_code_the_project_needs_but_not_the_one_it_deserves&#39;&gt;The Code The Project Needs, But Not The One It Deserves&lt;/h2&gt;

&lt;p&gt;So far so good, right? Get a dictionary. Encode it. Easy. Now we just need to decode it.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s where it get&amp;#8217;s a little gross. Here&amp;#8217;s the full, production method for you to take in (note that &lt;code&gt;VLog&lt;/code&gt; is a macro that does some fun things with &lt;code&gt;NSLog&lt;/code&gt; if DEBUG is defined). From that same NSObject category:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objective-c&#39;&gt;&lt;span class=&#39;k&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;LJD_initWithCoder:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;aDecoder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;selfDict&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;toDictionary&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;VLog&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;Decoding a %@&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NSStringFromClass&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;([&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;class&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;key&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;selfDict&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;containsValueForKey&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;key&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;VLog&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;Warning: Did not find value for &amp;#39;%@&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;key&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
            &lt;span class=&#39;k&#39;&gt;continue&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;@try&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;decodeObjectForKey&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;key&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            
&lt;span class=&#39;cp&#39;&gt;#ifdef DEBUG&lt;/span&gt;
            &lt;span class=&#39;c1&#39;&gt;// For Debugging/Logging&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;stringValue&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;%@&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;shortValue&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;([&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;stringValue&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;length&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;?&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;%@...&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;stringValue&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;substringToIndex&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;stringValue&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
&lt;span class=&#39;cp&#39;&gt;#endif&lt;/span&gt;

            &lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;selectorName&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;set%@:&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;key&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;stringByReplacingCharactersInRange&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSMakeRange&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;withString&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;key&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;substringToIndex&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;capitalizedString&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]]];&lt;/span&gt;

            &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;!=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSNull&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;null&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;respondsToSelector&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSSelectorFromString&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;selectorName&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)])&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;setValue&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;forKeyPath&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;key&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
                &lt;span class=&#39;n&#39;&gt;VLog&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;Set %@.%@: %@&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NSStringFromClass&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;([&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;class&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]),&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;key&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;shortValue&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                &lt;span class=&#39;n&#39;&gt;VLog&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;Warning: Did not set %@ to %@&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;key&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;shortValue&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;@catch&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSException&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;exception&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;VLog&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;Error with %@: %@&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;key&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;exception&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;debugDescription&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;@finally&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;c1&#39;&gt;// nada&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in any class we&amp;#8217;ve previously encoded:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objective-c&#39;&gt;&lt;span class=&#39;k&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;initWithCoder:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;aDecoder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;super&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;LJD_initWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The logging is a little verbose, but it was helpful during development (and the macros ensure they won&amp;#8217;t slow things down in production).&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s a few downsides to this approach. While it&amp;#8217;s mostly stable, we did run into crashes if a non &lt;code&gt;NSCoding&lt;/code&gt; class sat inside a foundation class (like &lt;code&gt;NSArray&lt;/code&gt; or &lt;code&gt;NSDictionary&lt;/code&gt;). This mostly wasn&amp;#8217;t a problem, since the crashes were all the result of something we missed, and a crash made it easy to fix during production (instead of silently failing).&lt;/p&gt;

&lt;p&gt;The other downside is this bit of code:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objective-c&#39;&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;selectorName&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;set%@:&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;key&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;stringByReplacingCharactersInRange&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSMakeRange&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;withString&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;key&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;substringToIndex&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;capitalizedString&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]]];&lt;/span&gt;

&lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;!=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSNull&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;null&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;respondsToSelector&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSSelectorFromString&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;selectorName&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)])...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is checking if it&amp;#8217;s a readonly property by looking for the selector &lt;code&gt;setValue:&lt;/code&gt;. This is less than ideal, especially since you can declare custom setters for properties. However, I&amp;#8217;ve never found a place where this is used in production code.&lt;/p&gt;

&lt;p&gt;The last downside to this is side effects from calling &lt;code&gt;setValue:&lt;/code&gt; type selectors. Many examples you see of NSCoding involve setting the instance variables inside of &lt;code&gt;initWithCoder:&lt;/code&gt;, like so:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objective-c&#39;&gt;&lt;span class=&#39;k&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;initWithCoder:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;decoder&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;super&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;_title&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;decoder&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;decodeObjectForKey&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;_author&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;decoder&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;decodeObjectForKey&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;_pageCount&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;decoder&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;decodeIntegerForKey&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;pageCount&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We had a great time trying to figure out why our final values didn&amp;#8217;t match what we encoded, until we finally realized that some of the setter methods were setting other values in the class! That&amp;#8217;s where the somewhat maniacal logging came into play. We ended up solving this by using a variant of this approach:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objective-c&#39;&gt;&lt;span class=&#39;k&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;initWithCoder:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;aDecoder&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;super&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;_doNotUpdate&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;YES&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;agrianInitWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;_doNotUpdate&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;NO&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    
    &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any of our setter methods that had cascading effects all checked for &lt;code&gt;_doNotUpdate&lt;/code&gt; before doing any changes.&lt;/p&gt;

&lt;h2 id=&#39;conclusion&#39;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I won&amp;#8217;t go over &lt;code&gt;NSKeyedArchiver&lt;/code&gt; or &lt;code&gt;NSKeyedUnarchiver&lt;/code&gt; here. Those classes are very straightforward once we had all the encoding/decoding worked out.&lt;/p&gt;

&lt;p&gt;We always strive for Good Code. Clean Code. Code that conforms to all the standards and conventions and unicorns out there. But that doesn&amp;#8217;t always work out. Sometimes the Right Code is very dirty indeed. So don&amp;#8217;t feel bad when you end up committing atrocities in the name of deadlines. We&amp;#8217;ve all done it. Some of us even blog about it.&lt;/p&gt;
  &lt;p&gt;&lt;a href=&quot;/general/demo/sample/real_world_nscoding&quot;&gt;Real World NSCoding&lt;/a&gt; was originally published by Luke Deniston at &lt;a href=&quot;&quot;&gt;Luke Deniston&lt;/a&gt; on November 14, 2013.&lt;/p&gt;</content>
</entry>

</feed>